import { useState, useEffect } from 'react';
import Register from './pages/Register';
import ChatRoom from './pages/ChatRoom';
import Login from './pages/Login';
import VideoChat from './pages/VideoChat';

const App = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [groups, setGroups] = useState([]);
  const [selectedGroupId, setSelectedGroupId] = useState(null);
  const [showLogin, setShowLogin] = useState(true);
  const [showVideoChat, setShowVideoChat] = useState(false);

  const handleLoginOrRegister = (user) => {
    setCurrentUser(user);
    setShowLogin(null);
  };

  useEffect(() => {
    const fetchGroups = async () => {
      if (!currentUser) return;

      try {
        const res = await fetch(
          `https://c45d-188-113-200-157.ngrok-free.app/api/groups/by-user/${currentUser._id}`,
          {
            headers: {
              'ngrok-skip-browser-warning': 'true',
            },
          }
        );

        if (!res.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø: ${res.status}`);
        }

        const data = await res.json();
        setGroups(data);
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã:', err.message);
      }
    };

    fetchGroups();
  }, [currentUser]);

  if (!currentUser) {
    return (
      <div className="signblock">
        {showLogin ? (
          <>
            <Login onSuccess={handleLoginOrRegister} />
            <p>
              –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <button onClick={() => setShowLogin(false)}>
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
            </p>
          </>
        ) : (
          <>
            <Register onSuccess={handleLoginOrRegister} />
            <p>
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
              <button onClick={() => setShowLogin(true)}>–í–æ–π—Ç–∏</button>
            </p>
          </>
        )}
      </div>
    );
  }

  // üîç –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('selectedGroupId:', selectedGroupId);
  console.log('showVideoChat:', showVideoChat);

  return (
    <div>
      <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {currentUser.name}!</h2>

      <h3>–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:</h3>
      <div className="chatview">
        <div className="chatlist">
          {groups.length === 0 ? (
            <p>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ</p>
          ) : (
            groups.map((group) => (
              <div key={group._id} style={{ marginBottom: '10px' }}>
                <button
                  className="chat-button"
                  onClick={() => {
                    setSelectedGroupId(group._id);
                    setShowVideoChat(false); // –ß–ê–¢
                  }}
                >
                  üí¨ {group.name || `–ì—Ä—É–ø–ø–∞ ${group._id.slice(-5)}`}
                </button>
                <button
                  style={{ marginLeft: '10px' }}
                  onClick={() => {
                    setSelectedGroupId(group._id);
                    setShowVideoChat(true); // –í–ò–î–ï–û–ß–ê–¢
                  }}
                >
                  üìπ –í–∏–¥–µ–æ—á–∞—Ç
                </button>
              </div>
            ))
          )}
        </div>

        {/* ====== –ö–æ–Ω—Ç–µ–Ω—Ç ====== */}
        <div className="chat-content" style={{ flex: 1 }}>
          {selectedGroupId && !showVideoChat && (
            <ChatRoom groupId={selectedGroupId} currentUser={currentUser} />
          )}

          {selectedGroupId && showVideoChat && (
            <>
              <VideoChat roomId={selectedGroupId} currentUser={currentUser} />
              <div style={{ marginTop: '10px' }}>
                <button onClick={() => setShowVideoChat(false)}>
                  ‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;
